// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi';

import 'package:ffi/ffi.dart';

/// Dart bindings to call Infra DID functions
class InfraSS58DIDBindings {
  /// Holds the Dynamic library.
  final DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  InfraSS58DIDBindings(DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> generate_ss58_did(Pointer<Utf8> network_id) {
    _generate_ss58_did ??=
        _dylib.lookupFunction<GenerateSS58DIDNative, GenerateSS58DID>(
            'infra_generate_ss58_did');
    return _generate_ss58_did!(network_id);
  }

  // ignore: non_constant_identifier_names
  GenerateSS58DID? _generate_ss58_did;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> generate_ss58_did_from_phrase(
      Pointer<Utf8> suri, Pointer<Utf8> network_id) {
    _generate_ss58_did_from_phrase ??= _dylib.lookupFunction<
        GenerateSS58DIDFromPhraseNative,
        GenerateSS58DIDFromPhrase>('infra_generate_ss58_did_from_phrase');
    return _generate_ss58_did_from_phrase!(suri, network_id);
  }

  // ignore: non_constant_identifier_names
  GenerateSS58DIDFromPhrase? _generate_ss58_did_from_phrase;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> did_to_hex_public_key(Pointer<Utf8> did) {
    _did_to_hex_public_key ??=
        _dylib.lookupFunction<DIDToHexPublicKeyNative, DIDToHexPublicKey>(
            'infra_did_to_hex_public_key');
    return _did_to_hex_public_key!(did);
  }

  // ignore: non_constant_identifier_names
  DIDToHexPublicKey? _did_to_hex_public_key;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> ss58_address_to_did(
      Pointer<Utf8> address, Pointer<Utf8> network_id) {
    _ss58_address_to_did ??=
        _dylib.lookupFunction<SS58AddressToDIDNative, SS58AddressToDID>(
            'infra_ss58_address_to_did');
    return _ss58_address_to_did!(address, network_id);
  }

  // ignore: non_constant_identifier_names
  SS58AddressToDID? _ss58_address_to_did;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> resolve(Pointer<Utf8> did) {
    _resolve ??= _dylib.lookupFunction<ResolveNative, Resolve>('infra_resolve');
    return _resolve!(did);
  }

  // ignore: non_constant_identifier_names
  Resolve? _resolve;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> issue_credential(Pointer<Utf8> did,
      Pointer<Utf8> credential_json, Pointer<Utf8> hex_private_key) {
    _issue_credential ??=
        _dylib.lookupFunction<IssueCredentialNative, IssueCredential>(
            'infra_issue_credential');
    return _issue_credential!(did, credential_json, hex_private_key);
  }

  // ignore: non_constant_identifier_names
  IssueCredential? _issue_credential;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> verify_credential(Pointer<Utf8> credential_json) {
    _verify_credential ??=
        _dylib.lookupFunction<VerifyCredentialNative, VerifyCredential>(
            'infra_verify_credential');
    return _verify_credential!(credential_json);
  }

  // ignore: non_constant_identifier_names
  VerifyCredential? _verify_credential;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> issue_presentation(Pointer<Utf8> did,
      Pointer<Utf8> credential_json, Pointer<Utf8> hex_private_key) {
    _issue_presentation ??=
        _dylib.lookupFunction<IssuePresentationNative, IssuePresentation>(
            'infra_issue_presentation');
    return _issue_presentation!(did, credential_json, hex_private_key);
  }

  // ignore: non_constant_identifier_names
  IssuePresentation? _issue_presentation;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> verify_presentation(Pointer<Utf8> presentation_json) {
    _verify_presentation ??=
        _dylib.lookupFunction<VerifyPresentationNative, VerifyPresentation>(
            'infra_verify_presentation');
    return _verify_presentation!(presentation_json);
  }

  // ignore: non_constant_identifier_names
  VerifyPresentation? _verify_presentation;

  // ignore: non_constant_identifier_names
  void rust_cstr_free(
    Pointer<Utf8> s,
  ) {
    _rust_cstr_free ??=
        _dylib.lookupFunction<FreeStringNative, FreeString>('rust_cstr_free');
    return _rust_cstr_free!(
      s,
    );
  }

  // ignore: non_constant_identifier_names
  FreeString? _rust_cstr_free;
}

typedef GenerateSS58DID = Pointer<Utf8> Function(Pointer<Utf8>);
typedef GenerateSS58DIDNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef GenerateSS58DIDFromPhrase = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>);
typedef GenerateSS58DIDFromPhraseNative = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>);

typedef DIDToHexPublicKey = Pointer<Utf8> Function(Pointer<Utf8>);
typedef DIDToHexPublicKeyNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef SS58AddressToDID = Pointer<Utf8> Function(Pointer<Utf8>, Pointer<Utf8>);
typedef SS58AddressToDIDNative = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>);

typedef Resolve = Pointer<Utf8> Function(Pointer<Utf8>);
typedef ResolveNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef IssueCredential = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>);
typedef IssueCredentialNative = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>);

typedef VerifyCredential = Pointer<Utf8> Function(Pointer<Utf8>);
typedef VerifyCredentialNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef IssuePresentation = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>);
typedef IssuePresentationNative = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>);

typedef VerifyPresentation = Pointer<Utf8> Function(Pointer<Utf8>);
typedef VerifyPresentationNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef FreeString = void Function(Pointer<Utf8>);
typedef FreeStringNative = Void Function(Pointer<Utf8>);
