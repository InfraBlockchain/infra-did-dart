// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi';

import 'package:ffi/ffi.dart';

/// Dart bindings to call Infra DID functions
class InfraDIDBindings {
  /// Holds the Dynamic library.
  final DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  InfraDIDBindings(DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> random_phrase(int words_number) {
    _random_phrase ??=
        _dylib.lookupFunction<RustRandomPhraseNative, RustRandomPhrase>(
            'random_phrase');
    return _random_phrase!(
      words_number,
    );
  }

  // ignore: non_constant_identifier_names
  RustRandomPhrase? _random_phrase;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> substrate_address(Pointer<Utf8> suri, int prefix) {
    _substrate_address ??=
        _dylib.lookupFunction<RustSubstrateAddressNative, RustSubstrateAddress>(
            'substrate_address');
    return _substrate_address!(suri, prefix);
  }

  // ignore: non_constant_identifier_names
  RustSubstrateAddress? _substrate_address;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> generate_ss58_did(Pointer<Utf8> network_id) {
    _generate_ss58_did ??=
        _dylib.lookupFunction<GenerateSS58DIDNative, GenerateSS58DID>(
            'generate_ss58_did');
    return _generate_ss58_did!(network_id);
  }

  // ignore: non_constant_identifier_names
  GenerateSS58DID? _generate_ss58_did;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> did_to_hex_public_key(Pointer<Utf8> did) {
    _did_to_hex_public_key ??=
        _dylib.lookupFunction<DIDToHexPublicKeyNative, DIDToHexPublicKey>(
            'did_to_hex_public_key');
    return _did_to_hex_public_key!(did);
  }

  // ignore: non_constant_identifier_names
  DIDToHexPublicKey? _did_to_hex_public_key;

  // ignore: non_constant_identifier_names
  Pointer<Utf8> ss58_address_to_did(
      Pointer<Utf8> address, Pointer<Utf8> network_id) {
    _ss58_address_to_did ??=
        _dylib.lookupFunction<SS58AddressToDIDNative, SS58AddressToDID>(
            'ss58_address_to_did');
    return _ss58_address_to_did!(address, network_id);
  }

  // ignore: non_constant_identifier_names
  SS58AddressToDID? _ss58_address_to_did;

  // ignore: non_constant_identifier_names
  void rust_cstr_free(
    Pointer<Utf8> s,
  ) {
    _rust_cstr_free ??=
        _dylib.lookupFunction<FreeStringNative, FreeString>('rust_cstr_free');
    return _rust_cstr_free!(
      s,
    );
  }

  // ignore: non_constant_identifier_names
  FreeString? _rust_cstr_free;
}

typedef RustRandomPhrase = Pointer<Utf8> Function(int);
typedef RustRandomPhraseNative = Pointer<Utf8> Function(Uint32);

typedef RustSubstrateAddress = Pointer<Utf8> Function(Pointer<Utf8>, int);
typedef RustSubstrateAddressNative = Pointer<Utf8> Function(
    Pointer<Utf8>, Uint32);

typedef GenerateSS58DID = Pointer<Utf8> Function(Pointer<Utf8>);
typedef GenerateSS58DIDNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef DIDToHexPublicKey = Pointer<Utf8> Function(Pointer<Utf8>);
typedef DIDToHexPublicKeyNative = Pointer<Utf8> Function(Pointer<Utf8>);

typedef SS58AddressToDID = Pointer<Utf8> Function(Pointer<Utf8>, Pointer<Utf8>);
typedef SS58AddressToDIDNative = Pointer<Utf8> Function(
    Pointer<Utf8>, Pointer<Utf8>);

typedef FreeString = void Function(Pointer<Utf8>);
typedef FreeStringNative = Void Function(Pointer<Utf8>);
